import $axios from '~/helpers/axios';

const blankData = $FILLABLE$;

export const useModule$CLASS$Store = defineStore('module.$PERMISSION$', {
    state: () => ({
        moduleName: '$NAME$',
        permission: 'module.$PERMISSION$',
        apiRoute: '/$API_ROUTE$',
        route: '/dashboard/$API_ROUTE$',
        data: blankData,
        list: null,
        create: false,
        edit: false,
        view: true,
        loading: true,
        form: blankData,
        filter: $FILTER$,
        exportFields: $HEADER$,
    }),

    actions: {
        fetchAll(payload) {
            this.loading = true;
            const response = useResponseStore();
            return new Promise((resolve, reject) => {
                $axios.get(this.apiRoute, { params: payload }).then(res => {
                    if (res.data.success == true) {
                        this.list = res.data.data;
                        response.clearErrors();
                    }
                    resolve(res.data)
                }).catch(err => {
                    reject(err);
                })
                this.loading = false;
            })
        },
        fetchData(payload) {
            this.loading = true;
            this.setView();
            const response = useResponseStore();
            return new Promise((resolve, reject) => {
                $axios.get(this.apiRoute + '/' + payload).then(res => {
                    this.data = res.data.data;
                    this.form = res.data.data;
                    response.clearErrors();
                    resolve(res.data)
                }).catch(err => {
                    reject(err);
                })
                this.loading = false;
            })
        },
        submitForm(method, payload) {
            this.loading = true;
            const response = useResponseStore();
            return new Promise((resolve, reject) => {
                $axios({
                    method: method,
                    url: method == "POST" ? this.apiRoute : this.apiRoute + '/' + this.data.id,
                    data: payload,
                }).then(res => {
                    this.data = res.data.data;
                    resolve(res.data)
                    response.clearErrors();
                }).catch(err => {
                    reject(err);
                })
                this.loading = false;
            })
        },
        remove(payload) {
            const response = useResponseStore();
            return new Promise((resolve, reject) => {
                $axios.delete(this.apiRoute + '/' + payload).then(res => {
                    this.data = null;
                    resolve(res.data)
                    response.clearErrors();
                }).catch(err => {
                    reject(err);
                })
            })
        },
        rollBack() {
            this.fetchData(this.data.id);
            this.setView();
        },
        setEdit() {
            this.edit = true;
            this.view = false;
            this.create = false;
        },
        setView() {
            this.edit = false;
            this.view = true;
            this.create = false;
        },
        setCreate() {
            this.edit = false;
            this.view = false;
            this.create = true;
            this.data = null;
            this.loading = false;
            this.resetForm();
        },
        setLoading(payload) {
            this.loading = payload;
        },
        resetForm() {
            this.form = $FILLABLE$;
        },
        resetFilter() {
            this.filter = $FILTER$;
        },
    },

    getters: {
        countFilter() {
            return Object.values(this.filter).filter(val => val != null).length
        },
        isCreate() {
            return this.create ? true : false;
        },
        isEdit() {
            return this.edit ? true : false;
        },
        isView() {
            return this.view ? true : false;
        }
    }

});


// make sure to pass the right store definition, `useModule$CLASS$Store` in this case.
if (import.meta.hot) {
    import.meta.hot.accept(acceptHMRUpdate(useModule$CLASS$Store, import.meta.hot))
}
